trigger: none

pool:
  name: student-lab-pool

variables:
  - name: projectName
    value: '<<<Training-Student-019-OC006>>>'            # <-- Update this
  - name: buildPipelineName
    value: '<<<finweb_myra_build>>>'          # <-- Update this
  - name: artifactName
    value: 'frontend'        
  - name: targetFile
    value: 'app.py'                             # Optional: Which file inside artifact to display
  - name: resourceGroup
    value: '<<<Training-Student-019-OC006>>>'        # <-- Update this
  - name: webAppName
    value: '<<< finweb-myra>>>'                # <-- Update this Azure Web App target

steps:
   - script: |
         echo "##vso[task.setvariable variable=PIPELINE_START_TIME]$(date +%s.%3N)"
         echo "##vso[task.setvariable variable=PIPELINE_START_TIME_UTC]$(date -u +%Y-%m-%dT%H:%M:%SZ)"
     displayName: "Capture pipeline start time"


    echo "Logging into Azure DevOps CLI using PAT..."
    echo "$(MY_DEVOPS_PAT)" | az devops login

    echo "Setting DevOps defaults..."
    az devops configure --defaults organization=https://dev.azure.com/opscosolutions project=$(projectName)

    echo "Resolving Pipeline ID for: $(buildPipelineName)..."
    PIPELINE_ID=$(az pipelines show --name "$(buildPipelineName)" --query id --output tsv)

    if [ -z "$PIPELINE_ID" ]; then
      echo "Pipeline not found!"
      exit 1
    fi

    echo "Looking for the latest successful build with artifacts..."

    for BUILD_ID in $(az pipelines build list \
      --definition-ids $PIPELINE_ID \
      --status completed \
      --result succeeded \
      --top 10 \
      --query '[].id' \
      --output tsv); do

      echo "Checking Build ID: $BUILD_ID"

      ARTIFACT_COUNT=$(az pipelines runs artifact list \
        --run-id $BUILD_ID \
        --query 'length(@)' \
        --output tsv)

      if [ "$ARTIFACT_COUNT" -gt 0 ]; then
        echo "Found build with artifacts: $BUILD_ID"
        SELECTED_BUILD_ID=$BUILD_ID
        break
      fi
    done

    if [ -z "$SELECTED_BUILD_ID" ]; then
      echo "##vso[task.complete result=Failed;]No successful builds with artifacts found in the last 10 builds!"
      exit 1
    fi

    echo "Downloading artifact from Build ID: $SELECTED_BUILD_ID..."
    mkdir -p artifacts
    az pipelines runs artifact download \
      --run-id $SELECTED_BUILD_ID \
      --artifact-name $(artifactName) \
      --path ./artifacts

    echo "Zipping artifact content for deployment..."
    cd artifacts
    zip -r ../deploy.zip .
    cd ..
    ls
  displayName: 'Fetch Last Successful Build That Has Artifacts'
  env:
    MY_DEVOPS_PAT: $(MY_DEVOPS_PAT)

- task: AzureCLI@2
  inputs:
    azureSubscription: 'AzureDevopsConnection'        # <-- Name of your service connection
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Deploying deploy.zip to Azure Web App: $(webAppName)..."
      ls
      az webapp deploy \
        --resource-group $(resourceGroup) \
        --name $(webAppName) \
        --src-path deploy.zip \
        --type zip
  displayName: 'Deploy Artifact to Azure Web App'

  - script: |
      export LOG_ANALYTICS_WORKSPACE_ID=$(LOG_ANALYTICS_WORKSPACE_ID)
      export LOG_ANALYTICS_SHARED_KEY=$(LOG_ANALYTICS_SHARED_KEY)
      export PIPELINE_NAME=$(Build.DefinitionName)
      export RUN_ID=$(Build.BuildId)
      export BUILD_STATUS=$(Agent.JobStatus)

      END_TIME=$(date +%s.%3N)
      export PIPELINE_END_TIME_UTC=$(date -u +%Y-%m-%dT%H:%M:%SZ)
      export PIPELINE_DURATION=$(awk "BEGIN {print $END_TIME - $(PIPELINE_START_TIME)}")
      echo "Duration is $PIPELINE_DURATION seconds"
      echo "PIPELINE_END_TIME_UTC is $PIPELINE_END_TIME_UTC"
      echo "PIPELINE_START_TIME_UTC is $PIPELINE_START_TIME_UTC"

      /azagent/venv/bin/python3 -c "
      import os
      import time
      from tests.log_analytics import send_log_to_loganalytics

      pipeline_data = [{
          'pipeline': os.environ.get('PIPELINE_NAME'),
          'run_id': os.environ.get('RUN_ID'),
          'status': os.environ.get('BUILD_STATUS'),
          'start_time': os.environ.get('PIPELINE_START_TIME_UTC'),
          'end_time': os.environ.get('PIPELINE_END_TIME_UTC'),
          'duration_seconds': float(os.environ.get('PIPELINE_DURATION') or 0)
      }]

      send_log_to_loganalytics(
          log_type='PipelineRunSummary',
          log_data=pipeline_data
      )"
    condition: always()
    displayName: "Send pipeline run metadata to Log Analytics"